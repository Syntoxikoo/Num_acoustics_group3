% This file solves the systems of equations using the pre-calculated matrices. 
% It obtains the pressures and velocities to be processed later to show the results.

% IdealMIC: Uses a simplified geometry as in VCH and Kampinga theses.

clear, tic

VERSION='VER7'; % choose the calculated microphone version to process
SubVer='h';
% Version 7: segments with varying element size are introduced, corner radii=Hgh/5
% The bug of changed viscosity coefficients corrected in versions: b, d and following

% Subversions of VER7 "h" to "n" are calculated with a modified IntF1
% using near-singular integrals and an earlier version of IntF2. Meant for
% publication in BNAM. (4-2012)
% 
% Ver:  Elements:  Round/Sharp:  Gradual/Uniform:
% -----------------------------------------------
%  m     31             R           U    %
%  l     25             S           U
%  k     45             S           U    %
%  j     51             R           U
%  h     100            R           U    %
%  i     176            R           G
%  n     352(LINEAR)    R           G

% Input:
pinc=1; % EXCITATION: external (constant) incident pressure
f=200*2.^([(0:16)/3 (17*3:30*3)/9]); % 1/3 octaves from 200 Hz to 200 kHz with more frequencies

m=0;
noloss=0; % if set to 1, also performs lossless calculation

% Constants
[rho,c,kp,ka,kh,kv,tau_a,tau_h,phi_a,phi_h,eta,mu]=VTconst(f,-1);

% Load mesh and physical parameters
el_wl=ceil(6*max(f)/c); % Mesh density as a function of the frequency
file=['.\MATfiles\VT_IdealMIC_f_' VERSION '_' SubVer '\VT_IdealMIC_f']; % path to find datafiles with coefficient matrices
eval(['[rzb,topology,rzline,IndMb,IndSide,Mmb,M,N,Tm,mu_m,Rad,Hgh,BPrad]=geom_BK4938_9_' VERSION '(el_wl,SubVer);']);

[Yavg]=AVGmem(rzb(IndMb,:));

[nvect,tvect]=normals(rzb,topology,'n');

% Constant matrices used in the calculation, a function of normal and tangential vectors:
NT1=nvect(:,1)*nvect(:,1)'+nvect(:,2)*nvect(:,2)'; NT2=nvect(:,1)*tvect(:,1)'+nvect(:,2)*tvect(:,2)';
NT3=tvect(:,1)*nvect(:,1)'+tvect(:,2)*nvect(:,2)'; NT4=tvect(:,1)*tvect(:,1)'+tvect(:,2)*tvect(:,2)';


% Gradient and laplacian matrices including the whole generator and varying spacings. Based on the secant formula applied twice.
[D0,Dl] = genderiv3(rzb,rzline);

% uniform or Bessel-shaped excitation (1 or 0),
% the analytical solution is also changed automatically
uniform=1;
if uniform
   pres=ones(Mmb,1)*pinc;
else
   k01=ZeroBessel(0,1);
   pres=pinc*besselj(0,rzb(IndMb,1)'*k01/Rad).';
end

% FEM MEMBRANE MODEL
[Am,Bm,rhs]=FEMmemLIN(rzb(IndMb,1));

% Coupling matrices and vectors;
rhs(end,:)=zeros(1,Mmb); % Impose boundary condition, no movement at the rim (1/2)
URS=zeros(Mmb,M);URS(:,IndMb)=rhs; % Upper Right
LLS=zeros(M,Mmb);LLS(IndMb,:)=diag(ones(1,Mmb)); % Lower left
p=zeros(Mmb+M,1);
p(1:Mmb,1)=rhs*pres;


% Calculations
pas=zeros(M,length(f));     % The acoustic pressure for each frequency
phs=zeros(M,length(f));     % The thermal pressure for each frequency
pss=zeros(M,length(f));     % The lossless pressure for each frequency
wmem=zeros(Mmb,length(f));  % Membrane displacement
wm=zeros(length(f),3);      % Averaged membrane displacement and pressure

for ii=1:length(f)
   
    % Load coefficient matrices from file generated by 'VT_BK4938_9_CalculateMatrices_VER7.m'
    SS=load([file num2str(floor(f(ii)))],'Aa','Ba','Ah','Bh','Av','Bv'); % Load all versions of A and B matrices for f(ii):
    Aa=SS.Aa;Ba=SS.Ba;Ah=SS.Ah;Bh=SS.Bh;Av=SS.Av;Bv=SS.Bv;
    
    disp(['Processing f= ' num2str(f(ii)) ' Hz '])

    % FEM membrane 
    % membrane wavenumber, w/c: see Morse (Vibration and Sound, Ch:5, Sec 17), Robey1954, Zuckerwar 1978
    K2=(2*pi*f(ii)).^2*mu_m/Tm; 
    ULS=(Am+K2*Bm)*Tm; % left hand side
    ULS(end,:)=[zeros(1,Mmb-1) 1];  % Impose boundary condition, no movement at the rim (2/2)
    ULS(:,end)=[zeros(Mmb-1,1) ; 1];  % Impose boundary condition, no movement at the rim (2/2 extra)
    
    if noloss==1
        % Pressure on the surface, lossless
        %B=i*kp(ii)*rho*c*B; % B times i*k*rho*c to compute pressure instead of velocity potential
        ps=([ ULS URS ; -j*2*pi*f(ii)*LLS (i*kp(ii)*rho*c*B)\A ])\p; 
        pss(:,ii)=ps(1+Mmb:end);  % lossless pressure
        wmNoLoss = Yavg * ps(1:Mmb);
    else
        wmNoLoss =  0;
    end
    
    % Matrix multiplications
    C1=phi_a(ii)-phi_h(ii)*tau_a(ii)/tau_h(ii);
    AvBv=Av\Bv;
    
    % Include thermal contribution
    ABah=phi_a(ii)*(Ba\Aa) - phi_h(ii)*(Bh\Ah)*tau_a(ii)/tau_h(ii);
    
    % Include viscothermal contribution
    rho_i_0=find(abs(rzb(:,1))<1e-10); % the values where rho=0 are changed to some very small number to avoid 1/r singularity in the divergence
    rho0=rzb(:,1);
    rho0(rho_i_0)=1e-10; %%%%% This value should not be too small (instability of the system) nor too high (unrealistic geometry). Work it out as a function of the other rho values
    
    % New version of the previous corrected vectorial relationship. This one has been checked for equivalence in a dummy test 
    ABaht=ABah + inv((rho0*ones(1,M)).*NT1.*(Bv\Av) + diag(nvect(:,1))) * C1 * ...
        ((rho0*ones(1,M).*(NT2.*(Bv\Av)*D0) + (rho0*ones(1,M).*Dl) + ((tvect(:,1)*ones(1,M)).*D0))); % expression with normal and tangential vectors (v2)

    % Set pressure release boundary condition on the rim
    CoefM=[ ULS URS*(1-tau_a(ii)/tau_h(ii)) ; -j*2*pi*f(ii)*LLS -ABaht ];
    CoefM(Mmb+IndSide,:)=zeros(length(IndSide),M+Mmb);
    BB=eye(M+Mmb);temp=-BB(:,Mmb+IndSide);
    CoefM(:,Mmb+IndSide)=temp;

    % Solve for acoustic pressure
    warning off
    pa=CoefM\p;  % Solve the coupled system, viscous and thermal loss
    warning on
    
    % Collect acoustic pressures for all frequencies
    pas(:,ii)=pa(1+Mmb:end);  % Viscous and thermal loss
    phs(:,ii)=-pa(1+Mmb:end)*tau_a(ii)/tau_h(ii);  % Viscous and thermal loss
    wmem(:,ii)=pa(1:Mmb);  % Membrane displacement
    wm(ii,:) = [wmNoLoss Yavg * (pa(1:Mmb)) Yavg * (pa(1+Mmb:Mmb*2)*(1-tau_a(ii)/tau_h(ii)))];  % Averaged membrane displacement and pressure

end


% ANALYTICAL SOLUTION
% parameters for the analytical solution
n=20; % number of modes analytical solution
rdiv=30; zdiv=11; % number of divisions in radial and heigth directions
r=linspace(0,Rad,rdiv);z=linspace(0,Hgh,zdiv);
[pa,ph,var,vaz,vhr,vhz,vtr,vtz,er]=plantier(f,Rad,Hgh,r,z,n,pinc,Tm,mu_m);
pANA(:,:)=pa(:,end,:)+ph(:,end,:);

% weight to average the membrane displacement (version 1)
YavgANA=AVGmem([r' zeros(rdiv,1) ones(rdiv,1)]);
for ii=1:length(f)
    wmANA(ii) = YavgANA * er(ii,:)';
    ptotANA(ii) = YavgANA * pANA(:,ii);
end

% prepare analytical mean displacement and mean pressure for plotting 
wmANAplot=abs(wmANA)/abs(wmANA(1)); % both sensitivity plots have the same normalization constant
ptotANAplot=abs(ptotANA)/(pi*Rad^2);

% prepare BEM mean displacement and mean pressure for plotting 
wmL=abs(wm(:,2))/abs(wmANA(1)); % both sensitivity plots have the same normalization constant
wmp=abs(wm(:,3))/(pi*Rad^2);

% VERIFY RESULTS
% dB sensitivity plots:
figure % Sensitivity plot, p. 98
hh=semilogx(f,20*log10(wmL),'-rx',f,20*log10(wmANAplot),'-bx');grid
set(hh,'LineWidth',2)
%loglog(f,wmL,'-rx',f,wmNL,'-g+');grid
%title('Simple microphone model');
legend('BEM calculation','Plantier''s analytical result')
axis([2e2 2e5 -25 5])
xlabel('Frequency, Hz');ylabel('Sensitivity, dB')

figure % Mean pressure plot, p. 99
loglog(f,wmp,'-rx',f,ptotANAplot,'-bx');grid
title('MIC 4938/4939 Simple MIC model');%legend('BEM','BEM No loss')
legend('BEM calculation','Plantier''s analytical result')
axis([2e2 2e5 5e-3 2])
xlabel('Frequency, Hz');ylabel('Mean pressure, Pa')

% Pressure and membrane displacement
rangef=1:5:length(f);
%rangef=[1 18 33 48 57];
legendstr=cell(1,length(rangef));
for jj=1:length(rangef)
    legendstr{jj}=[num2str(floor(f(rangef(jj)))) 'Hz'];
end
figure;
subplot(2,1,1)
plot(rzline(1:Mmb,1),abs(wmem(:,rangef)));grid
legend(legendstr)
title('Membrane displacement')
xlabel('Radial position, m');ylabel('Displacement, m')
subplot(2,1,2)
plot(rzline(:,1),abs(pas(:,rangef)+phs(:,rangef)));grid  
legend(legendstr)
title('Pressure along the generator')
xlabel('Radial position, m');ylabel('Pressure, Pa')

toc


